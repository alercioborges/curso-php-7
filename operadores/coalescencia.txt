O **operador de coalesc√™ncia nula** (null coalescing operator) em **PHP** √© representado por `??` e foi introduzido na vers√£o **PHP 7**.

---

### ‚úÖ O que √© o operador de coalesc√™ncia nula (`??`)?

√â um **operador l√≥gico** que retorna o **primeiro operando que n√£o seja `null`**.

---

### ‚úÖ Para que serve?

Ele serve para **verificar se uma vari√°vel est√° definida e n√£o √© `null`**. Se estiver, retorna o valor da vari√°vel; caso contr√°rio, retorna um valor padr√£o.

√â muito usado, por exemplo, para:

* Atribuir valores padr√µes a vari√°veis;
* Evitar erros ao acessar chaves inexistentes em arrays (`$_GET`, `$_POST`, etc.);
* Tornar o c√≥digo mais limpo e leg√≠vel do que usando `isset()`.

---

### ‚úÖ Como funciona?

A express√£o:

```php
$valor = $a ?? $b;
```

√â **equivalente** a:

```php
$valor = isset($a) ? $a : $b;
```

Ou seja:

* Se `$a` **est√° definida e n√£o √© `null`**, ent√£o `$valor = $a`;
* Sen√£o, `$valor = $b`.

---

### ‚úÖ Exemplos Did√°ticos

#### üü¢ Exemplo 1: Atribuir valor padr√£o

```php
$nome = $_GET['nome'] ?? 'Visitante';

echo "Ol√°, $nome!";
```

Se a URL for `pagina.php?nome=Maria`, a sa√≠da ser√°:

```
Ol√°, Maria!
```

Se n√£o houver par√¢metro `nome` na URL, a sa√≠da ser√°:

```
Ol√°, Visitante!
```

---

#### üü¢ Exemplo 2: Com m√∫ltiplas vari√°veis

```php
$usuario = $usuarioDoBanco ?? $usuarioDoCookie ?? 'Convidado';

echo "Bem-vindo, $usuario!";
```

Esse c√≥digo vai verificar:

1. Se `$usuarioDoBanco` est√° definido e n√£o √© `null`;
2. Se n√£o, verifica `$usuarioDoCookie`;
3. Se nenhum deles estiver definido, usa `'Convidado'`.

---

#### üü¢ Exemplo 3: Compara√ß√£o com `isset()`

Forma antiga (antes do PHP 7):

```php
$idade = isset($_POST['idade']) ? $_POST['idade'] : 18;
```

Forma moderna com `??`:

```php
$idade = $_POST['idade'] ?? 18;
```

Ambas atribuem o valor de `$_POST['idade']`, se existir, ou `18`, se n√£o existir.

---

### ‚ö†Ô∏è Observa√ß√£o importante

O operador `??` **s√≥ verifica se a vari√°vel √© `null` ou n√£o est√° definida**.
**N√£o** verifica se o valor √© vazio (`''`, `0`, `false`, etc.).

---

### üõë Exemplo de diferen√ßa entre `??` e `||`

```php
$valor1 = null;
$valor2 = 0;

$resultado1 = $valor1 ?? $valor2;  // resultado: 0
$resultado2 = $valor1 || $valor2;  // resultado: false
```

Aqui:

* `??` retorna `0` porque `null` √© ignorado e `0` √© retornado;
* `||` retorna `false` porque `null` √© falso e `0` tamb√©m √© considerado falso.

---

### ‚úÖ Conclus√£o

O operador `??` em PHP:

* **Simplifica a verifica√ß√£o de valores nulos**;
* **Substitui o uso de `isset()` com operador tern√°rio**;
* **Torna o c√≥digo mais limpo e leg√≠vel**;
* √â **ideal para fornecer valores padr√µes** ao acessar vari√°veis que podem n√£o estar definidas.

Se quiser, posso gerar um exemplo mais complexo, como um formul√°rio com valor padr√£o. Deseja isso?
