Em programa√ß√£o orientada a objetos (POO) em **PHP**, tanto `self` quanto `this` s√£o usados para acessar membros (m√©todos ou propriedades) da classe, **mas cada um tem um prop√≥sito diferente**. Vamos entender isso de forma **did√°tica**:

---

## ‚úÖ Diferen√ßa entre `this` e `self` em PHP

### üîπ `this`

* Refere-se **√† inst√¢ncia atual do objeto**.
* Usado para acessar **propriedades e m√©todos de inst√¢ncia**.
* S√≥ pode ser usado **dentro de m√©todos n√£o est√°ticos**.

> Em resumo: `this` √© usado quando estamos trabalhando com o **objeto** que foi criado a partir da classe.

### üîπ `self`

* Refere-se **√† pr√≥pria classe**, e n√£o √† inst√¢ncia.
* Usado para acessar **propriedades e m√©todos est√°ticos** (ou seja, que pertencem √† classe, e n√£o ao objeto).
* Pode ser usado **em m√©todos est√°ticos e n√£o est√°ticos**.

> Em resumo: `self` √© usado quando queremos acessar **algo que pertence √† classe**, e n√£o a um objeto espec√≠fico.

---

## üß† Analogia simples

Pense em uma **classe** como uma **receita de bolo**, e os **objetos** como os **bolos prontos**.

* `this` ‚Üí √© como dizer: ‚Äú**este bolo aqui**‚Äù.
* `self` ‚Üí √© como dizer: ‚Äú**a receita em si**‚Äù.

---

## üìå Exemplo com PHP

```php
class Exemplo {
    public $nome = "Jo√£o"; // propriedade de inst√¢ncia

    public static $contador = 0; // propriedade est√°tica

    public function __construct() {
        // Acessando propriedade de inst√¢ncia com $this
        echo "Nome: " . $this->nome . PHP_EOL;

        // Acessando propriedade est√°tica com self
        self::$contador++;
        echo "Contador (self): " . self::$contador . PHP_EOL;
    }

    public static function metodoEstatico() {
        // N√£o √© poss√≠vel usar $this aqui
        echo "M√©todo est√°tico chamou contador: " . self::$contador . PHP_EOL;
    }

    public function metodoDeInstancia() {
        echo "M√©todo de inst√¢ncia chamou nome: " . $this->nome . PHP_EOL;
        echo "M√©todo de inst√¢ncia chamou contador: " . self::$contador . PHP_EOL;
    }
}

// Criando dois objetos
$obj1 = new Exemplo();
$obj2 = new Exemplo();

// Chamando m√©todos
$obj1->metodoDeInstancia();
Exemplo::metodoEstatico();
```

---

## üß™ Sa√≠da esperada:

```
Nome: Jo√£o
Contador (self): 1
Nome: Jo√£o
Contador (self): 2
M√©todo de inst√¢ncia chamou nome: Jo√£o
M√©todo de inst√¢ncia chamou contador: 2
M√©todo est√°tico chamou contador: 2
```

---

## ‚úÖ Resumo

| Palavra-chave | Acessa o qu√™?      | Onde pode ser usada        | Exemplo              |
| ------------- | ------------------ | -------------------------- | -------------------- |
| `$this`       | Inst√¢ncia (objeto) | M√©todos n√£o est√°ticos      | `$this->propriedade` |
| `self`        | Classe (est√°tica)  | M√©todos est√°ticos e comuns | `self::$propriedade` |

