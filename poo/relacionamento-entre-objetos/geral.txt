
Na programa√ß√£o orientada a objetos (POO), **associa√ß√£o**, **agrega√ß√£o** e **composi√ß√£o** representam **relacionamentos entre classes**. Esses conceitos ajudam a organizar o c√≥digo de forma mais clara, reutiliz√°vel e modular.

Vamos explicar cada um de forma did√°tica, com exemplos em **PHP**:

---

### üß© 1. **Associa√ß√£o**

#### ‚úÖ O que √©:

√â um relacionamento gen√©rico entre duas classes. Uma classe **usa** outra, mas **n√£o √© dona dela**. A rela√ß√£o pode ser de um para um, um para muitos, muitos para muitos.

#### üí° Para que serve:

Serve para representar que um objeto est√° **relacionado** com outro, sem responsabilidade de gerenciamento.

#### üîß Como funciona:

Os objetos se conhecem, mas um **n√£o controla** a exist√™ncia do outro.

#### üìå Exemplo:

```php
class Professor {
    public string $nome;

    public function __construct(string $nome) {
        $this->nome = $nome;
    }
}

class Disciplina {
    public string $nome;
    public Professor $professor;

    public function __construct(string $nome, Professor $professor) {
        $this->nome = $nome;
        $this->professor = $professor;
    }
}

// Associa√ß√£o: Disciplina conhece Professor, mas n√£o √© dona dele
$professor = new Professor("Maria");
$disciplina = new Disciplina("Matem√°tica", $professor);
```

---

### üß∫ 2. **Agrega√ß√£o**

#### ‚úÖ O que √©:

√â um tipo especial de associa√ß√£o onde uma classe **possui** outra, mas **n√£o √© respons√°vel por sua exist√™ncia**. Ou seja, os objetos agregados **podem existir independentemente**.

#### üí° Para que serve:

Modela uma rela√ß√£o "tem um", mas com **baixa depend√™ncia**.

#### üîß Como funciona:

Se o objeto "todo" for destru√≠do, os "componentes" **continuam existindo**.

#### üìå Exemplo:

```php
class Aluno {
    public string $nome;

    public function __construct(string $nome) {
        $this->nome = $nome;
    }
}

class Sala {
    public string $numero;
    public array $alunos = [];

    public function __construct(string $numero) {
        $this->numero = $numero;
    }

    public function adicionarAluno(Aluno $aluno) {
        $this->alunos[] = $aluno;
    }
}

// Agrega√ß√£o: Sala tem alunos, mas n√£o √© dona deles
$aluno1 = new Aluno("Jo√£o");
$aluno2 = new Aluno("Ana");

$sala = new Sala("101");
$sala->adicionarAluno($aluno1);
$sala->adicionarAluno($aluno2);
```

Mesmo que a sala seja destru√≠da, os alunos continuam existindo.

---

### üß± 3. **Composi√ß√£o**

#### ‚úÖ O que √©:

√â uma rela√ß√£o mais forte que agrega√ß√£o. A classe "todo" √© **dona exclusiva** da parte. Se o objeto principal for destru√≠do, os objetos compostos tamb√©m s√£o.

#### üí° Para que serve:

Serve para modelar relacionamentos onde os objetos **n√£o fazem sentido existir fora da classe que os criou**.

#### üîß Como funciona:

O ciclo de vida dos componentes √© **controlado** pela classe "dona".

#### üìå Exemplo:

```php
class Endereco {
    public string $rua;
    public string $cidade;

    public function __construct(string $rua, string $cidade) {
        $this->rua = $rua;
        $this->cidade = $cidade;
    }
}

class Cliente {
    public string $nome;
    public Endereco $endereco;

    public function __construct(string $nome, string $rua, string $cidade) {
        $this->nome = $nome;
        // Cria√ß√£o do endere√ßo √© feita dentro da classe Cliente
        $this->endereco = new Endereco($rua, $cidade);
    }
}

// Composi√ß√£o: Cliente √© dono do Endere√ßo, que n√£o vive sozinho
$cliente = new Cliente("Carlos", "Rua A", "S√£o Paulo");
```

Se o objeto `Cliente` for destru√≠do, o `Endereco` tamb√©m √©.

---

### üß† Resumo Comparativo

| Conceito   | Liga√ß√£o  | Independ√™ncia do objeto ligado | Exemplo                |
| ---------- | -------- | ------------------------------ | ---------------------- |
| Associa√ß√£o | Fraca    | Sim                            | Disciplina ‚Üí Professor |
| Agrega√ß√£o  | Moderada | Sim                            | Sala ‚Üí Alunos          |
| Composi√ß√£o | Forte    | N√£o                            | Cliente ‚Üí Endere√ßo     |

---