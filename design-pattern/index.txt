### üß† O que √© um Design Pattern?

Um **Design Pattern** √© uma **solu√ß√£o reutiliz√°vel** para problemas comuns que surgem durante o desenvolvimento de software. Eles s√£o **modelos de arquitetura** que ajudam a escrever c√≥digo mais organizado, reutiliz√°vel, flex√≠vel e de f√°cil manuten√ß√£o.

---

### üéØ Para que serve?

Serve para:

* **Resolver problemas recorrentes** de design de software.
* **Padronizar solu√ß√µes**, facilitando a comunica√ß√£o entre desenvolvedores.
* **Reduzir complexidade**, usando estrat√©gias j√° testadas.
* **Aumentar a manutenibilidade** e clareza do c√≥digo.

---

### ‚öôÔ∏è Como funciona?

Os Design Patterns funcionam como **estruturas abstratas**, ou seja:

* Eles **n√£o s√£o c√≥digo pronto**, mas sim **modelos conceituais**.
* Voc√™ **adapta o padr√£o ao seu contexto**, conforme o problema que est√° resolvendo.

---

### üß± Tipos de Design Patterns

Existem 3 categorias principais:

1. **Criacionais** ‚Äì tratam da cria√ß√£o de objetos.
   Ex: Singleton, Factory, Abstract Factory, Builder.

2. **Estruturais** ‚Äì lidam com a composi√ß√£o de classes e objetos.
   Ex: Adapter, Decorator, Facade.

3. **Comportamentais** ‚Äì lidam com comunica√ß√£o entre objetos.
   Ex: Observer, Strategy, State.

---

### üí° Exemplo pr√°tico: **Padr√£o Strategy** com PHP

**Problema:** voc√™ quer aplicar diferentes formas de c√°lculo de frete (Sedex, PAC, Motoboy), e quer que isso seja flex√≠vel sem alterar o c√≥digo principal.

#### 1. Interface comum:

```php
interface FreteStrategy {
    public function calcular($peso);
}
```

#### 2. Estrat√©gias espec√≠ficas:

```php
class FreteSedex implements FreteStrategy {
    public function calcular($peso) {
        return $peso * 10;
    }
}

class FretePAC implements FreteStrategy {
    public function calcular($peso) {
        return $peso * 5;
    }
}

class FreteMotoboy implements FreteStrategy {
    public function calcular($peso) {
        return 30; // pre√ßo fixo
    }
}
```

#### 3. Contexto que usa a estrat√©gia:

```php
class CalculadoraFrete {
    private $strategy;

    public function __construct(FreteStrategy $strategy) {
        $this->strategy = $strategy;
    }

    public function calcularFrete($peso) {
        return $this->strategy->calcular($peso);
    }
}
```

#### 4. Utilizando:

```php
$frete = new CalculadoraFrete(new FreteSedex());
echo "Frete SEDEX: R$ " . $frete->calcularFrete(2) . "<br>";

$frete = new CalculadoraFrete(new FretePAC());
echo "Frete PAC: R$ " . $frete->calcularFrete(2) . "<br>";

$frete = new CalculadoraFrete(new FreteMotoboy());
echo "Frete Motoboy: R$ " . $frete->calcularFrete(2) . "<br>";
```

---

### ‚úÖ Vantagens do uso de Design Patterns:

* Voc√™ pode **mudar comportamentos** sem alterar a l√≥gica principal.
* **C√≥digo aberto a extens√µes**, mas fechado para modifica√ß√µes (princ√≠pio OCP).
* **Test√°vel e modular**.